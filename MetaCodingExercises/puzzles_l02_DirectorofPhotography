'''
A photography set consists of N cells in a row, numbered from 1 to N in order, and can be represented by a string C of length 
N. Each cell i is one of the following types (indicated by , the ith character of C):
If Ci= “P”, it is allowed to contain a photographer
If Ci= “A”, it is allowed to contain an actor
If Ci = “B”, it is allowed to contain a backdrop
If Ci = “.”, it must be left empty
A photograph consists of a photographer, an actor, and a backdrop, such that each of them is placed in a valid cell, and such that the actor is between the photographer and the backdrop. Such a photograph is considered artistic if the distance between the photographer and the actor is between X and Y cells (inclusive), and the distance between the actor and the backdrop is also between X and Y cells (inclusive). The distance between cells i and j is ∣i−j∣ (the absolute value of the difference between their indices).
Determine the number of different artistic photographs which could potentially be taken at the set. Two photographs are considered different if they involve a different photographer cell, actor cell, and/or backdrop cell.
'''
# it works for N ~= 300,000
from bisect import bisect_left, bisect_right
def getArtisticPhotographCount(N: int, C: str, X: int, Y: int) -> int:
    # Write your code here
    photographers = []
    actors = []
    backdrops = []
    
    # Collect positions of photographers and backdrops
    for i in range(N):
        if C[i] == 'P':
            photographers.append(i)
        elif C[i] == 'B':
            backdrops.append(i)
        elif C[i] == 'A':
            actors.append(i)
    count = 0
    
    # For each actor, count valid photographer-backdrop pairs
    for i in actors:
            left_p = bisect_left(photographers, i - Y)
            right_p = bisect_right(photographers, i - X)
            p_count = right_p - left_p
            # Using binary search to find the range of valid backdrops
            left_b = bisect_left(backdrops, i + X)
            right_b = bisect_right(backdrops, i + Y)
            b_count = right_b - left_b
            # Add to the total count
            count += p_count * b_count
            
            left_p = bisect_left(backdrops, i - Y)
            right_p = bisect_right(backdrops, i - X)
            p_count = right_p - left_p
            # Using binary search to find the range of valid backdrops
            left_b = bisect_left(photographers, i + X)
            right_b = bisect_right(photographers, i + Y)
            b_count = right_b - left_b
            # Add to the total count
            count += p_count * b_count
    return count
# Write any import statements here, the below works for N~=200
def isArtistic(i, pos, j, X, Y):
  dist1 = abs(i - pos)
  dist2 = abs(j - pos)
  if(dist1 >= X and dist1 <= Y):
    if(dist2 >= X and dist2 <= Y):
      return True
  return False
def getArtisticPhotographCount(N: int, C: str, X: int, Y: int) -> int:
  # Write your code here
  pos_P = []
  pos_A = []
  pos_B = []
  for i, c in enumerate(C):
    if(c == 'P'): pos_P.append(i)
    elif(c == 'A'): pos_A.append(i)
    elif(c == 'B'): pos_B.append(i)
    
  total_artistic = 0
  for p in pos_P:
    for a in pos_A:
      for b in pos_B:
        if( (p < a and a < b) or (p > a and a > b) ):
          if(isArtistic(p, a, b, X, Y)):
            total_artistic += 1
          
  return total_artistic
