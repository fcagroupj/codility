'''
https://www.metacareers.com/profile/coding_puzzles?puzzle=1492699897743843
There’s a circular train track with a circumference of C metres. Positions along the track are measured in metres, clockwise from its topmost point. For example, the topmost point is position 0, 
1 metre clockwise along the track is position 1, and 1 metre counterclockwise along the track is position C−1.
A train with negligible length runs clockwise along this track at a speed of 1 metre per second, starting from position 0. After C seconds go by, the train will have driven around the entire track and returned to position 0, at which point it will continue going around again, with this process repeated indefinitely.
There are N tunnels covering sections of the track, the ith of which begins at position Ai and ends at position Bi (and therefore has a length of Bi−Ai metres). No tunnel covers or touches position 0 (including at its endpoints), and no two tunnels intersect or touch one another (including at their endpoints). For example, if there's a tunnel spanning the interval of positions [1,4], there cannot be another tunnel spanning intervals [2,3] nor [4,5].
The train’s tunnel time is the total number of seconds it has spent going through tunnels so far. Determine the total number of seconds which will go by before the train’s tunnel time becomes K.

'''
from typing import List
# Write any import statements here

def getSecondsElapsed(C: int, N: int, A: List[int], B: List[int], K: int) -> int:
  # sort A&B by the starting point, put then into a list in/out, get the toal tunnels
  n_total_tunnel = 0
  l_tunnels = []
  for i in range(N):
    n_total_tunnel += B[i] - A[i]
    l_tunnels.append( [A[i], 'in'] )
    l_tunnels.append( [B[i], 'out'] )
  l_tunnels.sort()
  # print(1, l_tunnels)
  if(n_total_tunnel <= 0): return -1
  #  get the remaining tunnel time after circles
  n_circles_time = (K // n_total_tunnel) * C
  n_remains = K % n_total_tunnel
  # print(2, n_circles_time, n_remains)
  if(n_remains == 0): 
    margin = C - l_tunnels[-1] # don't pass the track after last tunnel
    return n_circles_time - margin

  tunnel_start = 0
  #  get the tunnel list and put them into the stack, calculate the tunnel time until reaching the target
  for a_tunnel in l_tunnels:
    if(a_tunnel[1] == 'in'):
      tunnel_start = a_tunnel[0]
    elif(a_tunnel[1] == 'out'):
      tunnel_period = a_tunnel[0] - tunnel_start
      if(tunnel_period < n_remains):
        n_remains -= tunnel_period
      else:
        n_circles_time += tunnel_start + n_remains
        # print(3, n_circles_time, tunnel_start, n_remains)
        break
  
  return n_circles_time
